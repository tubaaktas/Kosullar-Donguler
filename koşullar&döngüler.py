# -*- coding: utf-8 -*-
"""Koşullar&Döngüler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gS51FtBz4lrwHS7atXyDNfXGAygw3MUT

# **Conditions**

# **if,else,elif**
"""

if 1 == 1:
  print("True")

if 1 == 2: #buradaki islemin sonucu true olsaydi ekranda False görebilecektik
  print("False")

num = 11
if num == 10: #false
  print("number is 10")
elif  num == 11: #true
  print("number is 11")

def num_check(number):
  if number == 10: #True ise
    print("Number is 10")
  else: # True degilse
    print("Number is not 10")


num_check(10)

def num_check2(num):
  if num > 10:
    print("greater than 10")
  elif num <10:
    print("less than 10")
  else:
    print("equal to 10")

num_check2(11)
num_check2(5)
num_check2(10)

"""# **for** **loop** """

students=["Ali", "John", "Adem","Luis", "Tolgay" ,"Kaan","Mert"]

for student in students:
  print(student.upper())

salaries = [1000,1230, 2344,9830]

for salary in salaries:
  print(salary)

for salary in salaries:
  print(int(salary*20/100+salary))

#DONT REPEAT YOURSELF!

def new_salary(salary, rate):
 return salary * rate/100 + salary

for salary in salaries:
  print(new_salary(salary, 18))

for salary in salaries:
  if salary >= 3000:
    print(new_salary(salary, 10))
  else:
    print(new_salary(salary, 20))

"""**UYGULAMA**"""

def upp_two_index(string):
  new_str = ""
  for i in range(len(string)):
    if i % 2 == 0:
      new_str += string[i].upper()
    else:
      new_str += string[i].lower()
  print(new_str)

upp_two_index("bEnim AdIM TugbA")

"""# **Break & While & Continue**"""

#break
salaries = [1000, 2000, 3000, 4000, 5000]

for salary in salaries:
  if salary == 3000:
    break
  print(salary)

#continue
for salary in salaries:
  if salary == 3000:
    continue
  print(salary)

#while
number = 1
while number < 5: #number 5ten kucuk oldugu surece
  print(number)
  number +=1

"""# **Enumerate : Otomatik Counter/Indexer ile for loop**"""

students = ["Ali", "Mehmet", "Simay", "Rüya"]

for student in students:
  print(student)

for index, student in enumerate(students):
  print(index, student, sep="->")

cift = []
tek = []

for index, student in enumerate(students):
  if index % 2 == 0:
    cift.append(student)
  else:
    tek.append(student)

print(cift, tek, sep="\n")

"""#Cift indextekileri bir listeye tekleri bir listeye ve bu listeleri tek bir listede tutma :"""

#mycode
def divide_students(list):
  cift = []
  tek = []
  total = [tek, cift]
  for index, student in enumerate(list):
    if index % 2 == 0:
      cift.append(student)
    else:
      tek.append(student)
  return total

students = ["A", "S", "V", "E", "W", "T", "G"]
divide_students(students)

#Vahit Keskin's Code

def divide_students_original(students):
  groups = [[], []]
  for index, student in enumerate(students):
    if index % 2 == 0:
      groups[0].append(student)
    else:
      groups[1].append(student)
  return groups

divide_students_original(students)

"""# Alternating Fonksiyonunun Enumerate ile Yazılması"""

#Enumerate: enumerate(iterable, start=0) , Iterable: any object that supports iteration, Start: the index value from which the counter is to be started, by default it is 0
# Yinelenebilir: Yinelemeyi destekleyen herhangi bir nesne, Başlangıç: sayacın başlatılacağı dizin değeri, varsayılan olarak 0'dır.
def alternatig_with_enumerate(string):
  new_str = ""
  for i, letter in enumerate(string):
    if i % 2 == 0:
      new_str += letter.upper()
    else:
      new_str += letter.lower()
  return new_str

alternatig_with_enumerate("hi lovely python user")

"""#ZİP

"""

#Ayrı listeleri tek bir liste icerisine her birisinde bulunan elemanları aynı sırada zipleyerek bir araya getirip, her birisini tek bir eleman şeklinde görebileceğimiz formda birleştirdi.
list1 = ["a","b","c","d"]
list2 = [1,2,3,4]
list3 = ["Lale","Zambak","Menekşe","Lavanta"]

list(zip(list1,list2,list3))

"""## Lambda & Map & Filter & Reduce """

def sum(x,y):
  return x + y

sum(1,9) * 2

#lamdaların def den farkı kullan at fonksiyonlardır.
new_sum = lambda x, y : x + y # bu sekilde yer tutmadan bir noktada kullanıp atilirlar.

new_sum(1,9)*2

#map : Bir fonksiyon ve bu fonksiyonu uygulayabilecegi bir nesne vererek for dongusu yazmadan maplemis oluruz.
salaries = [1000, 2000, 3000, 4000, 5000]

def new_salary(x):
  return x * 20 /100 + x

new_salary(5000)

for salary in salaries:
  print(new_salary(salary))

#######################################
#del new_salary
#list(map(new_salary, salaries))
list(map(lambda x : x * 20 / 100 + x, salaries))

list(map(lambda x: x**2, salaries))

#FILTER
list_store = [1,2,3,4,5,6,7,8,9,10]
list(filter(lambda x: x % 2 == 0, list_store))#2ye bolumunden 0 kalanlari listele

#REDUCE : Azaltma anlamındaki bu fonksiyon bağımsız değişkeninde iletilen belirli bir işlevi, iletilen dizide belirtilen tüm liste öğelerine uygulamak için kullanılır.
from functools import reduce
list_store = [1,2,3,4,5] #Once 1 ile 2 yi topladi sonra 3 ü ekledi sonra 4 ü ta ki listede eleman kalmayana kadar bu islemi gerceklestirdi.
reduce(lambda a, b: a + b, list_store)

